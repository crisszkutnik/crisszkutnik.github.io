{"version":3,"sources":["webpack:///./src/pages/loadingAnim/loadingAnim.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/pages/loadingAnim/loading-logo.tsx"],"names":["LoadingAnim","props","id","doneAnim","showPage","_assertThisInitialized","self","ReferenceError","LoadingLogo","state","points","completeStr","str","last","finished","alpha","hexagonAnim","bind","componentDidMount","this","interval","setInterval","i","cond","length","setState","clearInterval","setTimeout","lastX","lastY","nextX","nextY","render","height","width","style","transition","transform","opacity","stroke","fill","strokeWidth","x","y","fontFamily","fontSize","React","Component"],"mappings":"iGAAA,sDAeeA,UAXK,SAACC,GACjB,OACI,yBAAKC,GAAG,SACJ,kBAAC,UAAD,CACIC,SAAUF,EAAME,SAChBC,SAAUH,EAAMG,c,yDCTjB,SAASC,EAAuBC,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,EALT,mC,0FCgBME,E,YAGJ,WAAYP,GAAO,aACjB,cAAMA,IAAN,MACKQ,MAAQ,CACXC,OAAQ,CACN,CAAC,IAAK,GACN,CAAC,EAAG,IACJ,CAAC,EAAG,KACJ,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,IACN,CAAC,IAAK,IAERC,YAAa,QACbC,IAAK,cACLC,KAAM,EACNC,UAAU,EACVC,MAAO,GAET,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAlBF,E,4CAqBnBC,kBAAA,WACEC,KAAKC,SAAWC,YAAYF,KAAKH,YAAa,K,EAGhDA,YAAA,WAAc,WACZ,GAAGG,KAAKV,MAAMM,OAAS,EAAG,CACxB,IAAIO,EACAC,EAAOJ,KAAKV,MAAMI,KAAO,IAAMM,KAAKV,MAAMC,OAAOc,OAAS,EAE5DF,EADCC,EACGJ,KAAKV,MAAMC,OAAOc,OAAS,EAE3BL,KAAKV,MAAMI,KAAO,EAExB,IAAID,EAAMO,KAAKV,MAAME,YAAc,IAGnC,GAFAC,GAAOO,KAAKV,MAAMC,OAAOY,GAAG,GAAK,IAAMH,KAAKV,MAAMC,OAAOY,GAAG,GAEzDC,EAUD,OATAJ,KAAKM,SAAS,CACZb,MACAD,YAAaC,EACbC,KAAMS,IAERI,cAAcP,KAAKC,UACnBO,YAAW,kBAAM,EAAKF,SAAS,CAAEX,UAAU,MAAS,KACpDa,WAAWR,KAAKlB,MAAMG,SAAU,UAChCuB,WAAWR,KAAKlB,MAAME,SAAU,KAGhCgB,KAAKM,SAAS,CACZb,MACAD,YAAaC,EACbC,KAAMS,EACNP,MAAO,IA5BD,MAqCSI,KAAKV,MAAMC,OAAOS,KAAKV,MAAMI,MAA7Ce,EArCO,KAqCAC,EArCA,OAsCSV,KAAKV,MAAMC,OAAOS,KAAKV,MAAMI,KAAO,GAApDiB,EAtCO,KAsCAC,EAtCA,KAwCRhB,EAAQI,KAAKV,MAAMM,MACnBH,EAAMO,KAAKV,MAAME,YAAc,IACnCC,GAAOgB,GAASE,EAAQF,GAASb,EAAQ,IACzCH,GAAOiB,GAASE,EAAQF,GAASd,EAEjCI,KAAKM,SAAS,CACZb,IAAKA,EACLG,MAAOA,EAAQ,O,EAInBiB,OAAA,WAGE,OACE,yBACE9B,GAAG,cACH+B,OAAO,MACPC,MAAM,MACNC,MAAO,CACLC,WAAY,uBACZC,UAAW,UAASlB,KAAKV,MAAMK,SAAW,EAAI,IAArC,IACTwB,QAAS,IAAGnB,KAAKV,MAAMK,SAAW,EAAI,KAGxC,8BAAUqB,MAbF,CAAEI,OAAQ,UAAWC,KAAM,gBAAiB,eAAkB,SAa9CC,YAAY,MAAM/B,OAAQS,KAAKV,MAAMG,MAC7D,0BACEuB,MAAO,CACLK,KAAM,UACNJ,WAAY,yBAEdM,EAAE,KACFC,EAAE,MACFC,WAAW,UACXC,SAAS,OARX,Q,GA9FkBC,IAAMC,WA+GjBvC","file":"component---src-pages-loading-anim-loading-anim-tsx-14c33d085c31500b90fd.js","sourcesContent":["import React from \"react\";\nimport LoadingLogo from \"./loading-logo\";\nimport \"./loadingAnim.scss\"\n\nconst LoadingAnim = (props) => {\n    return (\n        <div id=\"intro\">\n            <LoadingLogo \n                doneAnim={props.doneAnim}\n                showPage={props.showPage}\n            />\n        </div>\n    );\n}\n\nexport default LoadingAnim;","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React, { useEffect, useState } from \"react\";\n\ninterface Props {\n  doneAnim(): void;\n  showPage(): void;\n};\ninterface State {\n  points: [number, number][];\n  completeStr: string;\n  str: string;\n  last: number;\n  alpha: number;\n  finished: boolean;\n  interval?: NodeJS.Timeout;\n};\n\nclass LoadingLogo extends React.Component<Props, State> {\n  interval: NodeJS.Timeout;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: [\n        [125, 5],\n        [5, 80],\n        [5, 230],\n        [125, 305],\n        [255, 230],\n        [255, 80],\n        [125, 5]\n      ],\n      completeStr: \"125,5\",\n      str: \"125,5 125,5\",\n      last: 0,\n      finished: false,\n      alpha: 0,\n    }\n    this.hexagonAnim = this.hexagonAnim.bind(this);\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.hexagonAnim, 10);\n  }\n\n  hexagonAnim() {\n    if(this.state.alpha >= 1) {\n      let i;\n      let cond = this.state.last + 1 === this.state.points.length - 1;\n      if(cond)\n        i = this.state.points.length - 1;\n      else\n        i = this.state.last + 1;\n\n      let str = this.state.completeStr + \" \";\n      str += this.state.points[i][0] + \",\" + this.state.points[i][1];        \n    \n      if(cond) {\n        this.setState({\n          str,\n          completeStr: str,\n          last: i\n        });\n        clearInterval(this.interval);\n        setTimeout(() => this.setState({ finished: true }), 150);\n        setTimeout(this.props.showPage, 300);\n        setTimeout(this.props.doneAnim, 300);\n        return;\n      } else\n        this.setState({\n          str,\n          completeStr: str,\n          last: i,\n          alpha: 0\n        });\n    }\n\n    /*\n      This can be optimized by saving the difference between points\n      and multiplying it by the alpha factor each iteration\n    */\n\n    let [lastX, lastY] = this.state.points[this.state.last];\n    let [nextX, nextY] = this.state.points[this.state.last + 1];\n\n    let alpha = this.state.alpha\n    let str = this.state.completeStr + \" \";\n    str += lastX + (nextX - lastX) * alpha + \",\";\n    str += lastY + (nextY - lastY) * alpha;\n\n    this.setState({\n      str: str,\n      alpha: alpha + .05\n    })\n  }\n\n  render() {\n    let style = { stroke: \"#E94560\", fill: \"rgba(0,0,0,0)\", \"strokeLinejoin\": \"round\" };\n\n    return (\n      <svg\n        id=\"loading-svg\"\n        height=\"310\"\n        width=\"260\"\n        style={{\n          transition: \"all 0.5s ease-in-out\",\n          transform: `scale(${this.state.finished ? 0 : .4})`,\n          opacity: `${this.state.finished ? 0 : 1}`\n        }}\n      >\n        <polyline style={style} strokeWidth=\"8px\" points={this.state.str} />\n        <text\n          style={{ \n            fill: \"#E94560\", \n            transition: \"all 0.25s ease-in-out\"\n          }}\n          x=\"53\"\n          y=\"190\"\n          fontFamily=\"Poppins\"\n          fontSize=\"110\"\n        >\n          CS\n      </text>\n      </svg>\n    );\n  }\n}\n\nexport default LoadingLogo;"],"sourceRoot":""}